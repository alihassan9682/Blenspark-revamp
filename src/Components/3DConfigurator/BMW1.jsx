/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 C:\Users\MADIHA\Desktop\BlenSpark\Blenspark-revamp\public\BMW.glb --transform 
Files: C:\Users\MADIHA\Desktop\BlenSpark\Blenspark-revamp\public\BMW.glb [16.59MB] > C:\Users\MADIHA\Desktop\BlenSpark\Blenspark-revamp\BMW-transformed.glb [1.59MB] (90%)
*/

import React, { useRef, useEffect } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import glb from './BMW-transformed.glb';
import * as THREE from 'three';
export function BMW(props) {
  const group = useRef();

  // Create individual refs for each mesh
  const tireFRef = useRef();
  const dashWheelRef = useRef();
  const dashLeatherRef = useRef();
  const dashCarbonRef = useRef();
  const dashScreenRef = useRef();
  const chassisBodyRef = useRef();
  const chassisCarpetRef = useRef();
  const tailgateGlassRef = useRef();
  const tailgateLogoRef = useRef();
  const headlightsRef = useRef();
  const doorFLBodyRef = useRef();
  const doorFLBlackRef = useRef();
  const doorFLGlassRef = useRef();
  const doorFLLeatherRef = useRef();
  const doorFLSignalRef = useRef();
  const doorRLBodyRef = useRef();
  const doorRLBlackRef = useRef();
  const doorRLGlassRef = useRef();
  const doorRLLeatherRef = useRef();
  const doorFRBodyRef = useRef();
  const doorFRBlackRef = useRef();
  const doorFRGlassRef = useRef();
  const doorFRLeatherRef = useRef();
  const doorFRSignalRef = useRef();
  const doorRRBodyRef = useRef();
  const doorRRSignalRef = useRef();
  const doorRRBlackRef = useRef();
  const doorRRGlassRef = useRef();
  const doorRRLeatherRef = useRef();
  const tailgateLightsRef = useRef();

  const { nodes, materials, animations } = useGLTF(glb);
  const { actions } = useAnimations(animations, group);

  // Use useEffect to create an object containing all refs
  useEffect(() => {
    const meshRefs = {
      tireF: tireFRef,
      dashWheel: dashWheelRef,
      dashLeather: dashLeatherRef,
      dashCarbon: dashCarbonRef,
      dashScreen: dashScreenRef,
      chassisBody: chassisBodyRef,
      chassisCarpet: chassisCarpetRef,
      tailgateGlass: tailgateGlassRef,
      tailgateLogo: tailgateLogoRef,
      headlights: headlightsRef,
      doorFLBody: doorFLBodyRef,
      doorFLBlack: doorFLBlackRef,
      doorFLGlass: doorFLGlassRef,
      doorFLLeather: doorFLLeatherRef,
      doorFLSignal: doorFLSignalRef,
      doorRLBody: doorRLBodyRef,
      doorRLBlack: doorRLBlackRef,
      doorRLGlass: doorRLGlassRef,
      doorRLLeather: doorRLLeatherRef,
      doorFRBody: doorFRBodyRef,
      doorFRBlack: doorFRBlackRef,
      doorFRGlass: doorFRGlassRef,
      doorFRLeather: doorFRLeatherRef,
      doorFRSignal: doorFRSignalRef,
      doorRRBody: doorRRBodyRef,
      doorRRSignal: doorRRSignalRef,
      doorRRBlack: doorRRBlackRef,
      doorRRGlass: doorRRGlassRef,
      doorRRLeather: doorRRLeatherRef,
      tailgateLights: tailgateLightsRef,
    };

    // Log the refs object for debugging (or use it as needed)
    props.onRefsReady(meshRefs);
  }, []); // Empty dependency array to run only once on mount
  // Make sure you import this if it's not already

  const handleClick = (name) => {
    const action = actions[name];
    if (!action) {
      console.warn(`Animation ${name} not found`);
      return;
    }

    action.setLoop(THREE.LoopOnce, 0);
    action.clampWhenFinished = true;

    action.getMixer().removeEventListener('finished');

    const onFinished = () => {
      console.log(`Animation ${name} finished`);
      action.paused = true;
      action.getMixer().removeEventListener('finished', onFinished);
    };
    action.getMixer().addEventListener('finished', onFinished);

    // If not running, determine direction based on current time
    if (!action.isRunning()) {
      if (action.time === 0 || action.timeScale === -1) {
        // Play forward
        action.timeScale = 1;
        action.reset().play();
      } else {
        // Play in reverse from the end
        action.timeScale = -1;
        action.paused = false;
        action.time = action.getClip().duration; // Start at the end
        action.play();
      }
    } else if (action.paused) {
      // Toggle direction on pause
      if (action.timeScale === 1) {
        action.timeScale = -1;
        action.time = action.getClip().duration; // Reverse from end
      } else {
        action.timeScale = 1;
        action.reset();
      }
      action.paused = false;
      action.play();
    }
  };


  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          ref={tireFRef}
          name="m_m_tire_f_mm_tire_protector_F_0"
          geometry={nodes.m_m_tire_f_mm_tire_protector_F_0.geometry}
          material={materials.PaletteMaterial001}
          position={[0.72, 0.353, 1.376]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={dashWheelRef}
          name="inmx7m60i_dash_inmx7m60i_wheel_03a_0"
          geometry={nodes.inmx7m60i_dash_inmx7m60i_wheel_03a_0.geometry}
          material={materials.PaletteMaterial001}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={dashLeatherRef}
          name="inmx7m60i_dash_inmx7m60i_leather1_0"
          geometry={nodes.inmx7m60i_dash_inmx7m60i_leather1_0.geometry}
          material={materials.inmx7m60i_leather1}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={dashCarbonRef}
          name="inmx7m60i_dash_inmx7m60i_carbon_interior_0"
          geometry={nodes.inmx7m60i_dash_inmx7m60i_carbon_interior_0.geometry}
          material={materials.inmx7m60i_carbon_interior}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={dashScreenRef}
          name="inmx7m60i_dash_inmx7m60i_dashscreen_0"
          geometry={nodes.inmx7m60i_dash_inmx7m60i_dashscreen_0.geometry}
          material={materials.inmx7m60i_dashscreen}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={chassisBodyRef}
          name="inmx7m60i_chassis_inmx7m60i_body_0"
          geometry={nodes.inmx7m60i_chassis_inmx7m60i_body_0.geometry}
          material={materials.PaletteMaterial002}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={chassisCarpetRef}
          name="inmx7m60i_chassis_inmx7m60i_carpet_0"
          geometry={nodes.inmx7m60i_chassis_inmx7m60i_carpet_0.geometry}
          material={materials.inmx7m60i_carpet}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={tailgateGlassRef}
          name="inmx7m60i_tailgate_inmx7m60i_glass_0"
          geometry={nodes.inmx7m60i_tailgate_inmx7m60i_glass_0.geometry}
          material={materials.PaletteMaterial003}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={tailgateLogoRef}
          name="inmx7m60i_tailgate_inmx7m60i_logo_0"
          geometry={nodes.inmx7m60i_tailgate_inmx7m60i_logo_0.geometry}
          material={materials.inmx7m60i_logo}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={headlightsRef}
          name="inmx7m60i_headlights1_inmx7m60i_running_r_0"
          geometry={nodes.inmx7m60i_headlights1_inmx7m60i_running_r_0.geometry}
          material={materials.PaletteMaterial004}
          rotation={[-Math.PI / 2, 0, 0]}
        />
        <mesh
          ref={doorFLBodyRef}
          name="inmx7m60i_doorfl_inmx7m60i_body_0"
          geometry={nodes.inmx7m60i_doorfl_inmx7m60i_body_0.geometry}
          material={materials.PaletteMaterial002}
          position={[0.851, 0.598, 0.811]}
          rotation={[-Math.PI / 2, 0, 0]}
          onClick={() => handleClick("inmx7m60i_doorfl_inmx7m60i_body_0Action")}
        >
          <mesh
            ref={doorFLBlackRef}
            name="inmx7m60i_doorfl_inmx7m60i_black_0"
            geometry={nodes.inmx7m60i_doorfl_inmx7m60i_black_0.geometry}
            material={materials.PaletteMaterial001}
            position={[-0.055, 0, -0.95]}
          />
          <mesh
            ref={doorFLGlassRef}
            name="inmx7m60i_doorfl_inmx7m60i_glass_0"
            geometry={nodes.inmx7m60i_doorfl_inmx7m60i_glass_0.geometry}
            material={materials.PaletteMaterial003}
            position={[-0.055, 0, -0.95]}
          />
          <mesh
            ref={doorFLLeatherRef}
            name="inmx7m60i_doorfl_inmx7m60i_leather1_0"
            geometry={nodes.inmx7m60i_doorfl_inmx7m60i_leather1_0.geometry}
            material={materials.inmx7m60i_leather1}
            position={[-0.055, 0, -0.95]}
          />
          <mesh
            ref={doorFLSignalRef}
            name="inmx7m60i_doorfl_inmx7m60i_signalL_0"
            geometry={nodes.inmx7m60i_doorfl_inmx7m60i_signalL_0.geometry}
            material={materials.PaletteMaterial005}
            position={[-0.055, 0, -0.95]}
          />
        </mesh>
        <mesh
          ref={doorRLBodyRef}
          name="inmx7m60i_doorrl_inmx7m60i_body_0"
          geometry={nodes.inmx7m60i_doorrl_inmx7m60i_body_0.geometry}
          material={materials.PaletteMaterial002}
          position={[0.804, 0.677, -0.176]}
          rotation={[-Math.PI / 2, 0, 0]}
          onClick={() => handleClick("inmx7m60i_doorrl_inmx7m60i_body_0Action")}
        >
          <mesh
            ref={doorRLBlackRef}
            name="inmx7m60i_doorrl_inmx7m60i_black_0"
            geometry={nodes.inmx7m60i_doorrl_inmx7m60i_black_0.geometry}
            material={materials.PaletteMaterial001}
          />
          <mesh
            ref={doorRLGlassRef}
            name="inmx7m60i_doorrl_inmx7m60i_glass_0"
            geometry={nodes.inmx7m60i_doorrl_inmx7m60i_glass_0.geometry}
            material={materials.PaletteMaterial003}
          />
          <mesh
            ref={doorRLLeatherRef}
            name="inmx7m60i_doorrl_inmx7m60i_leather1_0"
            geometry={nodes.inmx7m60i_doorrl_inmx7m60i_leather1_0.geometry}
            material={materials.inmx7m60i_leather1}
          />
        </mesh>
        <mesh
          ref={doorFRBodyRef}
          name="inmx7m60i_doorfr_inmx7m60i_body_0"
          geometry={nodes.inmx7m60i_doorfr_inmx7m60i_body_0.geometry}
          material={materials.PaletteMaterial002}
          position={[-0.85, 0.596, 0.814]}
          rotation={[-Math.PI / 2, 0, 0]}
          onClick={() => handleClick("inmx7m60i_doorfr_inmx7m60i_body_0Action")}
        >
          <mesh
            ref={doorFRBlackRef}
            name="inmx7m60i_doorfr_inmx7m60i_black_0"
            geometry={nodes.inmx7m60i_doorfr_inmx7m60i_black_0.geometry}
            material={materials.PaletteMaterial001}
            position={[0.044, -0.003, 0.054]}
          />
          <mesh
            ref={doorFRGlassRef}
            name="inmx7m60i_doorfr_inmx7m60i_glass_0"
            geometry={nodes.inmx7m60i_doorfr_inmx7m60i_glass_0.geometry}
            material={materials.PaletteMaterial003}
            position={[0.044, -0.003, 0.054]}
          />
          <mesh
            ref={doorFRLeatherRef}
            name="inmx7m60i_doorfr_inmx7m60i_leather1_0"
            geometry={nodes.inmx7m60i_doorfr_inmx7m60i_leather1_0.geometry}
            material={materials.inmx7m60i_leather1}
            position={[0.044, -0.003, 0.054]}
          />
          <mesh
            ref={doorFRSignalRef}
            name="inmx7m60i_doorfr_inmx7m60i_signalL_0"
            geometry={nodes.inmx7m60i_doorfr_inmx7m60i_signalL_0.geometry}
            material={materials.PaletteMaterial005}
            position={[0.044, -0.003, 0.054]}
          />
        </mesh>
        <mesh
          ref={doorRRBodyRef}
          name="inmx7m60i_doorrr_inmx7m60i_body_0"
          geometry={nodes.inmx7m60i_doorrr_inmx7m60i_body_0.geometry}
          material={materials.PaletteMaterial002}
          position={[-0.804, 0.69, -0.165]}
          rotation={[-Math.PI / 2, 0, 0]}
          onClick={() => handleClick("inmx7m60i_doorrr_inmx7m60i_body_0Action")}
        >
          <mesh
            ref={doorRRSignalRef}
            name="inmx7m60i_doorfr_inmx7m60i_signalR_0"
            geometry={nodes.inmx7m60i_doorfr_inmx7m60i_signalR_0.geometry}
            material={materials.PaletteMaterial005}
            position={[-0.002, -0.982, -0.04]}
          />
          <mesh
            ref={doorRRBlackRef}
            name="inmx7m60i_doorrr_inmx7m60i_black_0"
            geometry={nodes.inmx7m60i_doorrr_inmx7m60i_black_0.geometry}
            material={materials.PaletteMaterial001}
          />
          <mesh
            ref={doorRRGlassRef}
            name="inmx7m60i_doorrr_inmx7m60i_glass_0"
            geometry={nodes.inmx7m60i_doorrr_inmx7m60i_glass_0.geometry}
            material={materials.PaletteMaterial003}
          />
          <mesh
            ref={doorRRLeatherRef}
            name="inmx7m60i_doorrr_inmx7m60i_leather1_0"
            geometry={nodes.inmx7m60i_doorrr_inmx7m60i_leather1_0.geometry}
            material={materials.inmx7m60i_leather1}
          />
        </mesh>
        <mesh
          ref={tailgateLightsRef}
          name="inmx7m60i_tailgatelights_inmx7m60i_signalL_0"
          geometry={nodes.inmx7m60i_tailgatelights_inmx7m60i_signalL_0.geometry}
          material={materials.PaletteMaterial005}
          rotation={[-Math.PI / 2, 0, 0]}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/BMW-transformed.glb');