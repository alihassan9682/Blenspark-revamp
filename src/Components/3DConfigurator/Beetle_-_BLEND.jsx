/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ../assets/Beetle_-_BLEND.glb --transform 
Files: ../assets/Beetle_-_BLEND.glb [6.27MB] > C:\Users\Hamza-Asif\OneDrive\Desktop\BlenSpark Re\3D configurator testes\3d-configurator\src\components\Beetle_-_BLEND-transformed.glb [558.37KB] (91%)
*/

import React from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import beetle from './Beetle_-_BLEND-transformed.glb'
import * as THREE from 'three';
export function Beetle(props) {
  const group = React.useRef()
  const { nodes, materials, animations } = useGLTF(beetle)
  const { actions } = useAnimations(animations, group)
  const [doorOpen, setDoorOpen] = React.useState(false);
  // Play an animation when the component mounts
  React.useEffect(() => {
    console.log('Available Animations:');
    animations.forEach((clip, index) => {
      console.log(`Animation ${index + 1}: ${clip.name}, Duration: ${clip.duration}s`);
    });
  }, [animations]);


  const AnimationHandler = () => {
    if (!actions) {
      console.error("Actions object is undefined or not initialized.");
      return;
    }
    console.log('Available Animations:');
    Object.keys(actions).forEach((name) => {
      const action = actions[name];

      if (!action) {
        console.error(`Animation "${name}" is not defined in actions.`);
        return;
      }

      // Common action configurations
      action.clampWhenFinished = true;
      action.loop = THREE.LoopOnce;

      console.log(`Action: ${name}, Time: ${action.time}, Paused: ${action.paused}, Duration: ${action.getClip().duration}`);

      if (!doorOpen) {
        // Play forward (open)
        action.reset(); // Reset action for consistent playback
        action.paused = false;
        action.timeScale = 1;
        action.play();
        setDoorOpen(true);
        console.log(`Opening the door for: ${name}`);
      } else {
        // Play in reverse (close)
        action.reset(); // Reset action to avoid artifacts
        action.time = action.getClip().duration; // Start at the end
        action.paused = false;
        action.timeScale = -1;
        action.play();
        setDoorOpen(false);
        console.log(`Closing the door for: ${name}`);
      }
    });
  };

  React.useEffect(() => {
    if (group.current) {
      group.current.traverse((child) => {
        if (child.isMesh) {
          child.material.color.set(props.color); // Update the color of each material
        }
      });
    }
  }, [props.color]);
  return (
    <group ref={group} {...props} dispose={null}  >
      <group name="Scene" rotation={[0, 0, 0]} scale={[0.1, 0.1, 0.1]}>
        <mesh name="Back_Fenders" geometry={nodes.Back_Fenders.geometry} material={materials.PaletteMaterial001} position={[0.154, 0, -0.117]} rotation={[Math.PI / 2, 0, 0.955]} />
        <mesh name="Doors" geometry={nodes.Doors.geometry} material={materials.PaletteMaterial001} position={[-23.802, 30.843, -16.453]} rotation={[Math.PI / 2, 0, 0.955]} onClick={() => AnimationHandler("DoorsAction")}>
          <mesh name="Glass" geometry={nodes.Glass.geometry} material={materials.PaletteMaterial001} position={[27.171, -10.122, 30.843]} />
        </mesh>
        <mesh name="Doors001" geometry={nodes.Doors001.geometry} material={materials.PaletteMaterial001} position={[-23.541, 30.843, 25.621]} rotation={[Math.PI / 2, 0, 0.955]} onClick={() => AnimationHandler("Doors.001Action")}>
          <mesh name="Glass001" geometry={nodes.Glass001.geometry} material={materials.PaletteMaterial001} position={[-7.328, -34.208, 30.843]} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/Beetle_-_BLEND-transformed.glb')
